from hikkatl.types import Message
from .. import loader, utils
import requests

# meta developer: @sqlmerr_m
# meta banner: https://github.com/sqlmerr/sqlmerr/blob/main/assets/hikka_mods/sqlmerrmodules_numberfacts.png?raw=true


@loader.tds
class NumbersFacts(loader.Module):
    """Interesting facts about numbers | Check the config"""

    strings = {
        "name": "NumbersFacts",
        "noargs": "<emoji document_id=5240241223632954241>üö´</emoji> <b>You didn't enter any arguments</b>",
        "indexerror": "<emoji document_id=5240241223632954241>üö´</emoji> <b>You have not entered enough arguments</b>",
        "type": "Type of facts about numbers. Trivia is a fact from life, math is a mathematical fact, date and year is a question about a date",
    }

    string_ru = {
        "noargs": "<emoji document_id=5240241223632954241>üö´</emoji> <b>–í—ã –Ω–µ –≤–≤–µ–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã</b>",
        "indexerror": "<emoji document_id=5240241223632954241>üö´</emoji> <b>–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤</b>",
        "type": "–¢–∏–ø —Ñ–∞–∫—Ç–æ–≤ –æ —á–∏—Å–ª–∞—Ö. Trivia ‚Äî —Ñ–∞–∫—Ç –∏–∑ –∂–∏–∑–Ω–∏, math ‚Äî –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç, date –∏ year ‚Äî –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –¥–∞—Ç—É",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "type",
                "math",
                lambda: self.strings("type"),
                validator=loader.validators.Choice(["date", "math", "year", "trivia"]),
            ),
        )

    @loader.command(ru_doc="[—á–∏—Å–ª–æ] - –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç –æ–± —ç—Ç–æ–º —á–∏—Å–ª–µ")
    async def numberfact(self, message: Message):
        """[number] - get fact about number"""
        if not (args := utils.get_args_raw(message).split()):
            return await utils.answer(message, self.strings("no_args"))
        number = args[0]
        _type = self.config["type"]

        url = f"http://numbersapi.com/{number}/{_type}"
        response = await utils.run_sync(requests.get, url)
        data = response.text
        await utils.answer(
            message,
            await self._client.translate(
                message.peer_id,
                message,
                to_lang=self._db.get("hikka.translations", "lang")[0:2],
                raw_text=data,
                entities=message.entities,
            ),
        )
